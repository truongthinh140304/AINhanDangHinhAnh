╔══════════════════════════════════════════════════════════════════╗
║       🐘 POSTGRESQL - TỔNG HỢP ĐẦY ĐỦ                           ║
║       Hướng dẫn kết nối PostgreSQL cho backend                   ║
╚══════════════════════════════════════════════════════════════════╝

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  📚 FILES HƯỚNG DẪN
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. POSTGRESQL_QUICK_START.txt      ← Hướng dẫn nhanh 5 phút
   → Đọc file này để setup nhanh nhất

2. POSTGRESQL_NHANH.md             ← Setup nhanh với chi tiết
   → Có troubleshooting và commands

3. POSTGRESQL_SETUP_CHECKLIST.md   ← Checklist từng bước
   → Tick từng bước để đảm bảo không bỏ sót

4. HUONG_DAN_POSTGRESQL.md         ← Hướng dẫn đầy đủ nhất
   → Đọc khi cần hiểu sâu

5. POSTGRESQL_TONG_HOP.txt         ← File này
   → Tổng hợp tất cả thông tin

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  🚀 QUICK START - 5 PHÚT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

BƯỚC 1: Cài PostgreSQL (10 phút)
   https://www.postgresql.org/download/windows/
   → Password: postgres
   → Port: 5432

BƯỚC 2: Tạo Database (2 phút)
   pgAdmin 4 → Create Database → Name: nhandanghinhanh

BƯỚC 3: Config (1 phút)
   cd backend
   ren env_example_copy.txt .env
   # Sửa password trong .env nếu cần

BƯỚC 4: Test Connection (30 giây)
   python test_postgresql_connection.py

BƯỚC 5: Tạo Tables (30 giây)
   python init_db.py

BƯỚC 6: Test Database (30 giây)
   python test_db.py

BƯỚC 7: Chạy Server (30 giây)
   python main.py

✅ XONG! → http://localhost:8000/docs

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  🛠️ FILES BACKEND
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

CONFIG:
✅ backend/.env                          ← Config database
   (Tạo từ env_example_copy.txt)
✅ backend/env_example_copy.txt          ← Template
   
DATABASE SETUP:
✅ backend/database.py                   ← Database connection
✅ backend/models.py                     ← Tables schema (6 tables)

SCRIPTS:
✅ backend/init_db.py                    ← Tạo tables
✅ backend/test_db.py                    ← Test CRUD operations
✅ backend/test_postgresql_connection.py ← Test connection nhanh

API:
✅ backend/main.py                       ← Backend server
✅ backend/services/db_service.py        ← Database functions

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  📊 DATABASE SCHEMA (6 TABLES)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. users
   ├── id (primary key)
   ├── username (unique)
   ├── email (unique)
   ├── hashed_password
   ├── full_name
   ├── is_active
   ├── created_at
   └── updated_at

2. recognition_history
   ├── id (primary key)
   ├── transaction_id (unique)
   ├── user_id (foreign key → users)
   ├── image_filename
   ├── image_path
   ├── image_url
   ├── people_count
   ├── genders (JSON)
   ├── colors (JSON)
   ├── weather (JSON)
   ├── objects (JSON)
   ├── processing_time
   ├── status
   └── created_at

3. detected_persons
   ├── id (primary key)
   ├── recognition_id (foreign key → recognition_history)
   ├── person_id
   ├── gender
   ├── gender_confidence
   ├── bbox_x, bbox_y, bbox_width, bbox_height
   ├── clothing_color
   ├── clothing_color_hex
   └── color_confidence

4. detected_objects
   ├── id (primary key)
   ├── recognition_id (foreign key → recognition_history)
   ├── object_class
   ├── object_name_vi
   ├── confidence
   └── bbox_x, bbox_y, bbox_width, bbox_height

5. daily_statistics
   ├── id (primary key)
   ├── date
   ├── total_recognitions
   ├── total_people_detected
   ├── total_objects_detected
   ├── avg_processing_time
   ├── male_count
   ├── female_count
   └── most_common_objects (JSON)

6. system_logs
   ├── id (primary key)
   ├── level (INFO, WARNING, ERROR)
   ├── message
   ├── module
   ├── user_id
   ├── ip_address
   ├── user_agent
   ├── request_path
   ├── extra_data (JSON)
   └── created_at

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  🔄 DATA FLOW
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

UPLOAD ẢNH:
  Flutter App
      ↓
  POST /api/recognize
      ↓
  Backend xử lý:
    - Detect người (YOLO)
    - Nhận dạng giới tính
    - Nhận dạng màu áo
    - Phân tích thời tiết
    - Detect vật dụng
      ↓
  Lưu vào PostgreSQL:
    - recognition_history (1 record)
    - detected_persons (nhiều records)
    - detected_objects (nhiều records)
      ↓
  Response về Flutter App
      ↓
  Hiển thị kết quả

XEM LỊCH SỬ:
  Flutter App
      ↓
  GET /api/history
      ↓
  Backend query PostgreSQL
      ↓
  Trả về danh sách
      ↓
  Flutter hiển thị

XEM CHI TIẾT:
  Flutter App
      ↓
  GET /api/history/{transaction_id}
      ↓
  Backend query PostgreSQL (join tables)
      ↓
  Trả về full details
      ↓
  Flutter hiển thị chi tiết

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  💻 COMMANDS QUAN TRỌNG
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

SETUP:
  cd backend
  ren env_example_copy.txt .env         # Tạo config
  python test_postgresql_connection.py  # Test connection
  python init_db.py                      # Tạo tables
  python test_db.py                      # Test database
  python main.py                         # Chạy server

DAILY:
  cd backend
  python main.py                         # Start server

TROUBLESHOOTING:
  python test_postgresql_connection.py  # Quick test
  python test_db.py                      # Full test
  python init_db.py --reset              # Reset database (XÓA TẤT CẢ!)

POSTGRESQL COMMANDS:
  psql --version                         # Check version
  psql -U postgres                       # Connect
  psql -U postgres -d nhandanghinhanh    # Connect to DB
  \dt                                    # List tables
  \d table_name                          # Describe table
  SELECT * FROM recognition_history;     # Query data
  \q                                     # Quit

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  🔧 TROUBLESHOOTING
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

❌ connection refused
   → PostgreSQL chưa chạy
   Fix: services.msc → postgresql → Start

❌ password authentication failed
   → Password sai trong .env
   Fix: Kiểm tra DB_PASSWORD trong .env

❌ database "nhandanghinhanh" does not exist
   → Chưa tạo database
   Fix: pgAdmin → Create Database

❌ No module named 'psycopg2'
   → Package chưa cài
   Fix: pip install psycopg2-binary

❌ relation "users" does not exist
   → Tables chưa tạo
   Fix: python init_db.py

❌ Port 5432 already in use
   → Port bị chiếm
   Fix: Đổi port trong .env hoặc kill process

❌ .env file not found
   → File .env chưa tạo
   Fix: ren env_example_copy.txt .env

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  ✅ VERIFY THÀNH CÔNG
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

CHECKLIST:
□ PostgreSQL installed và running
□ Database "nhandanghinhanh" created
□ File .env created với đúng password
□ python test_postgresql_connection.py → PASSED
□ python init_db.py → 6 tables created
□ python test_db.py → ALL TESTS COMPLETED
□ python main.py → Server started
□ http://localhost:8000/docs → API docs hiển thị
□ POST /api/recognize → Upload ảnh thành công
□ GET /api/history → Xem được lịch sử
□ pgAdmin → Thấy dữ liệu trong tables

Nếu tất cả OK → ✅ POSTGRESQL HOÀN TOÀN SẴN SÀNG!

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  🎯 API ENDPOINTS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

UPLOAD & RECOGNITION:
  POST /api/recognize
    - Upload ảnh
    - Nhận dạng và lưu vào database
    - Response: {transaction_id, results...}

HISTORY:
  GET /api/history
    - Lấy tất cả lịch sử
    - Query params: limit, offset, user_id

  GET /api/history/{transaction_id}
    - Lấy chi tiết 1 record
    - Include: persons, objects, full details

STATISTICS:
  GET /api/statistics
    - Tổng số ảnh đã xử lý
    - Số người/vật dụng detected
    - Thống kê theo ngày

USERS (nếu implement auth):
  POST /api/users/register
  POST /api/users/login
  GET /api/users/me

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  💡 USE CASES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. Upload ảnh và lưu lịch sử
   → POST /api/recognize
   → Dữ liệu tự động lưu vào PostgreSQL
   → Có thể xem lại sau

2. Xem lịch sử tất cả ảnh đã upload
   → GET /api/history
   → Hiển thị list với thumbnail
   → Sort by date

3. Xem chi tiết 1 ảnh
   → GET /api/history/{transaction_id}
   → Full details: người, vật dụng, thời tiết
   → Có thể download ảnh gốc

4. Thống kê
   → GET /api/statistics
   → Số ảnh đã xử lý
   → Top vật dụng phổ biến
   → Tỷ lệ nam/nữ

5. Query custom
   → pgAdmin hoặc psql
   → SQL queries phức tạp
   → Export data

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  📈 FUTURE ENHANCEMENTS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

□ User authentication & authorization
□ Multi-user support
□ Advanced statistics dashboard
□ Export data (CSV, Excel, PDF)
□ Image tagging & categorization
□ Search by date, color, objects
□ AI model training from saved data
□ Batch upload & processing
□ Real-time notifications
□ Database backup automation

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  🔐 SECURITY NOTES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

DEVELOPMENT:
✅ Password: postgres (OK cho local dev)
✅ echo=True (log SQL queries)
✅ Simple connection

PRODUCTION:
⚠️  Change password to strong password
⚠️  Set echo=False (no SQL logging)
⚠️  Use environment variables
⚠️  Enable SSL connection
⚠️  Restrict database access
⚠️  Regular backups
⚠️  Monitor performance

.env file:
⚠️  NEVER commit .env to git
⚠️  Add .env to .gitignore
⚠️  Use different .env for prod/dev

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  📚 TÀI LIỆU THAM KHẢO
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

PostgreSQL:
  https://www.postgresql.org/docs/
  
SQLAlchemy ORM:
  https://docs.sqlalchemy.org/
  
FastAPI with Database:
  https://fastapi.tiangolo.com/tutorial/sql-databases/
  
pgAdmin:
  https://www.pgadmin.org/docs/

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  📞 SUPPORT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Nếu gặp vấn đề:
1. Đọc phần TROUBLESHOOTING ở trên
2. Chạy: python test_postgresql_connection.py
3. Check error message chi tiết
4. Đọc các files hướng dẫn khác
5. Google: "[error message] postgresql python"

Các files hỗ trợ:
  POSTGRESQL_QUICK_START.txt      → Quick 5-minute guide
  POSTGRESQL_NHANH.md             → Detailed quick guide
  POSTGRESQL_SETUP_CHECKLIST.md   → Step-by-step checklist
  HUONG_DAN_POSTGRESQL.md         → Complete guide
  POSTGRESQL_TONG_HOP.txt         → This file

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  ✅ KẾT QUẢ SAU KHI HOÀN THÀNH
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Bạn sẽ có:
✅ PostgreSQL server running locally
✅ Database "nhandanghinhanh" with 6 tables
✅ Backend kết nối database thành công
✅ API lưu tất cả dữ liệu vào database
✅ Xem lịch sử upload qua API
✅ Query và phân tích data trong pgAdmin
✅ Foundation để mở rộng features

Bạn có thể:
✅ Upload ảnh và lưu lịch sử vĩnh viễn
✅ Xem lại tất cả ảnh đã xử lý
✅ Phân tích thống kê (giới tính, màu sắc, vật dụng)
✅ Export data để báo cáo
✅ Backup và restore dữ liệu
✅ Scale lên nhiều users
✅ Tích hợp với Flutter app

═══════════════════════════════════════════════════════════════════

         🎉 POSTGRESQL SETUP HOÀN TẤT - SẴN SÀNG SỬ DỤNG! 🎉

═══════════════════════════════════════════════════════════════════

Version: 1.0.0
Last Updated: 26/10/2025
Status: ✅ Complete & Production Ready
Total Setup Time: ~15 minutes

═══════════════════════════════════════════════════════════════════

