"""
Backend API Server - ·ª®ng D·ª•ng Nh·∫≠n D·∫°ng ƒê·ªëi T∆∞·ª£ng
FastAPI RESTful API cho Flutter Frontend
"""

from fastapi import FastAPI, UploadFile, File, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import Optional, List
import os
import uuid
from datetime import datetime
import shutil

# Import c√°c modules nh·∫≠n d·∫°ng
from modules.nhan_dang_gioi_tinh import nhan_dang_gioi_tinh_tu_anh
from modules.nhan_dang_mau_sac import nhan_dang_mau_ao
from modules.nhan_dang_thoi_tiet import phan_tich_thoi_tiet
from modules.nhan_dang_vat_dung import nhan_dang_vat_dung

# C·∫•u h√¨nh
UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)

# Kh·ªüi t·∫°o FastAPI
app = FastAPI(
    title="API Nh·∫≠n D·∫°ng ƒê·ªëi T∆∞·ª£ng",
    description="Backend API cho ·ª©ng d·ª•ng nh·∫≠n d·∫°ng ƒë·ªëi t∆∞·ª£ng tr√™n ·∫£nh",
    version="1.0.0"
)

# CORS - Cho ph√©p Flutter app g·ªçi API
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Production: thay * b·∫±ng domain c·ª• th·ªÉ
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ==================== MODELS ====================

class RecognitionResult(BaseModel):
    """Model k·∫øt qu·∫£ nh·∫≠n d·∫°ng"""
    transaction_id: str
    image_url: str
    people_count: int
    genders: List[dict]
    colors: List[dict]
    weather: dict
    objects: List[dict]
    processing_time: float
    timestamp: str
    status: str = "success"

class ErrorResponse(BaseModel):
    """Model response l·ªói"""
    status: str = "error"
    message: str
    detail: Optional[str] = None

# ==================== ENDPOINTS ====================

@app.get("/")
async def root():
    """Health check endpoint"""
    return {
        "status": "running",
        "service": "Nh·∫≠n D·∫°ng ƒê·ªëi T∆∞·ª£ng API",
        "version": "1.0.0",
        "endpoints": {
            "recognize": "/api/recognize",
            "health": "/health",
            "docs": "/docs"
        }
    }

@app.get("/health")
async def health_check():
    """Ki·ªÉm tra server health"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat()
    }

@app.post("/api/recognize", response_model=RecognitionResult)
async def recognize_image(file: UploadFile = File(...)):
    """
    Nh·∫≠n d·∫°ng ƒë·ªëi t∆∞·ª£ng trong ·∫£nh
    
    Args:
        file: File ·∫£nh upload t·ª´ Flutter app
        
    Returns:
        RecognitionResult: K·∫øt qu·∫£ nh·∫≠n d·∫°ng chi ti·∫øt
    """
    start_time = datetime.now()
    
    try:
        # Ki·ªÉm tra file type
        if not file.content_type.startswith("image/"):
            raise HTTPException(
                status_code=400,
                detail="File ph·∫£i l√† ·∫£nh (jpg, png, ...)"
            )
        
        # T·∫°o ID duy nh·∫•t cho giao d·ªãch
        transaction_id = str(uuid.uuid4())
        
        # L∆∞u file t·∫°m
        file_extension = os.path.splitext(file.filename)[1]
        temp_filename = f"{transaction_id}{file_extension}"
        temp_path = os.path.join(UPLOAD_DIR, temp_filename)
        
        # Ghi file
        with open(temp_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        
        # ===== X·ª¨ L√ù AI =====
        
        # 1. Nh·∫≠n d·∫°ng ng∆∞·ªùi v√† gi·ªõi t√≠nh
        gender_results = nhan_dang_gioi_tinh_tu_anh(temp_path)
        
        # 2. Nh·∫≠n d·∫°ng m√†u √°o
        color_results = []
        if gender_results:  # N·∫øu c√≥ ng∆∞·ªùi
            for person in gender_results:
                color = nhan_dang_mau_ao(temp_path, person.get('bbox'))
                color_results.append({
                    "person_id": person.get('person_id'),
                    "color": color.get('ten_mau'),
                    "hex": color.get('ma_hex'),
                    "confidence": color.get('do_tin_cay')
                })
        
        # 3. Nh·∫≠n d·∫°ng th·ªùi ti·∫øt/phong c·∫£nh
        weather_result = phan_tich_thoi_tiet(temp_path)
        
        # 4. Nh·∫≠n d·∫°ng v·∫≠t d·ª•ng
        object_results = nhan_dang_vat_dung(temp_path)
        
        # T√≠nh th·ªùi gian x·ª≠ l√Ω
        end_time = datetime.now()
        processing_time = (end_time - start_time).total_seconds()
        
        # T·∫°o response
        result = RecognitionResult(
            transaction_id=transaction_id,
            image_url=f"/uploads/{temp_filename}",
            people_count=len(gender_results) if gender_results else 0,
            genders=gender_results or [],
            colors=color_results,
            weather=weather_result or {},
            objects=object_results or [],
            processing_time=round(processing_time, 2),
            timestamp=datetime.now().isoformat(),
            status="success"
        )
        
        return result
        
    except Exception as e:
        # Log l·ªói
        print(f"Error processing image: {str(e)}")
        
        # X√≥a file t·∫°m n·∫øu c√≥ l·ªói
        if os.path.exists(temp_path):
            os.remove(temp_path)
        
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói x·ª≠ l√Ω ·∫£nh: {str(e)}"
        )

@app.get("/api/history")
async def get_history():
    """
    L·∫•y l·ªãch s·ª≠ nh·∫≠n d·∫°ng
    TODO: K·∫øt n·ªëi v·ªõi PostgreSQL
    """
    return {
        "status": "success",
        "message": "Ch·ª©c nƒÉng ƒëang ph√°t tri·ªÉn - c·∫ßn k·∫øt n·ªëi PostgreSQL",
        "data": []
    }

@app.delete("/api/transaction/{transaction_id}")
async def delete_transaction(transaction_id: str):
    """
    X√≥a giao d·ªãch v√† ·∫£nh
    TODO: K·∫øt n·ªëi v·ªõi PostgreSQL
    """
    return {
        "status": "success",
        "message": f"ƒê√£ x√≥a giao d·ªãch {transaction_id}"
    }

# ==================== ERROR HANDLERS ====================

@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    """X·ª≠ l√Ω HTTP exceptions"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "status": "error",
            "message": exc.detail
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    """X·ª≠ l√Ω c√°c exceptions kh√°c"""
    return JSONResponse(
        status_code=500,
        content={
            "status": "error",
            "message": "L·ªói server n·ªôi b·ªô",
            "detail": str(exc)
        }
    )

# ==================== STARTUP/SHUTDOWN ====================

@app.on_event("startup")
async def startup_event():
    """Kh·ªüi ƒë·ªông server"""
    print("=" * 60)
    print("üöÄ Backend API Server Started!")
    print("=" * 60)
    print(f"üìç Server running at: http://localhost:8000")
    print(f"üìñ API Documentation: http://localhost:8000/docs")
    print(f"üìä Alternative docs: http://localhost:8000/redoc")
    print("=" * 60)

@app.on_event("shutdown")
async def shutdown_event():
    """T·∫Øt server"""
    print("üõë Backend API Server Stopped!")

# ==================== RUN ====================

if __name__ == "__main__":
    import uvicorn
    
    print("\n" + "=" * 60)
    print("üéØ Starting Backend API Server...")
    print("=" * 60 + "\n")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,  # Auto-reload khi code thay ƒë·ªïi
        log_level="info"
    )

