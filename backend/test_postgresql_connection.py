"""
Test PostgreSQL Connection - Nhanh v√† ƒë∆°n gi·∫£n
Script n√†y test k·∫øt n·ªëi PostgreSQL m√† kh√¥ng c·∫ßn import model ph·ª©c t·∫°p
"""

import os
from dotenv import load_dotenv

# Load .env file
load_dotenv()

def test_basic_connection():
    """Test k·∫øt n·ªëi PostgreSQL c∆° b·∫£n"""
    print("=" * 60)
    print("üêò POSTGRESQL CONNECTION TEST")
    print("=" * 60)
    
    # L·∫•y DATABASE_URL t·ª´ .env
    database_url = os.getenv(
        "DATABASE_URL",
        "postgresql://postgres:postgres@localhost:5432/nhandanghinhanh"
    )
    
    print(f"\nüìå Database URL:")
    # ·∫®n password khi hi·ªÉn th·ªã
    safe_url = database_url.replace(":postgres@", ":****@")
    print(f"   {safe_url}")
    
    # Test 1: Import psycopg2
    print("\n1Ô∏è‚É£ Testing psycopg2 import...")
    try:
        import psycopg2
        print("   ‚úÖ psycopg2 imported successfully!")
    except ImportError:
        print("   ‚ùå psycopg2 not found!")
        print("   üí° Fix: pip install psycopg2-binary")
        return False
    
    # Test 2: Parse DATABASE_URL
    print("\n2Ô∏è‚É£ Parsing database URL...")
    try:
        from urllib.parse import urlparse
        result = urlparse(database_url)
        
        username = result.username
        password = result.password
        host = result.hostname
        port = result.port
        database = result.path[1:]  # Remove leading '/'
        
        print(f"   Host: {host}")
        print(f"   Port: {port}")
        print(f"   Database: {database}")
        print(f"   Username: {username}")
        print(f"   Password: {'*' * len(password) if password else 'None'}")
        print("   ‚úÖ URL parsed successfully!")
        
    except Exception as e:
        print(f"   ‚ùå Error parsing URL: {str(e)}")
        return False
    
    # Test 3: Connect to PostgreSQL
    print("\n3Ô∏è‚É£ Connecting to PostgreSQL...")
    try:
        conn = psycopg2.connect(
            host=host,
            port=port,
            database=database,
            user=username,
            password=password
        )
        print("   ‚úÖ Connection established!")
        
        # Test 4: Execute simple query
        print("\n4Ô∏è‚É£ Testing database query...")
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        print(f"   PostgreSQL version: {version[0][:50]}...")
        print("   ‚úÖ Query executed successfully!")
        
        # Test 5: List tables
        print("\n5Ô∏è‚É£ Checking tables...")
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name;
        """)
        tables = cursor.fetchall()
        
        if tables:
            print(f"   Found {len(tables)} table(s):")
            for table in tables:
                print(f"   ‚úÖ {table[0]}")
        else:
            print("   ‚ö†Ô∏è  No tables found (database is empty)")
            print("   üí° Run: python init_db.py")
        
        # Close connection
        cursor.close()
        conn.close()
        print("\n   ‚úÖ Connection closed!")
        
        # Success
        print("\n" + "=" * 60)
        print("‚úÖ POSTGRESQL CONNECTION TEST: PASSED!")
        print("=" * 60)
        print("\nüí° Next steps:")
        print("   1. Create tables: python init_db.py")
        print("   2. Test full database: python test_db.py")
        print("   3. Run server: python main.py")
        print()
        
        return True
        
    except psycopg2.OperationalError as e:
        print(f"   ‚ùå Connection failed: {str(e)}")
        print("\n" + "=" * 60)
        print("‚ùå CONNECTION ERROR - TROUBLESHOOTING")
        print("=" * 60)
        
        if "password authentication failed" in str(e):
            print("\nüîí Password incorrect!")
            print("   ‚Üí Check password in .env file")
            print("   ‚Üí Make sure it matches PostgreSQL password")
            
        elif "database" in str(e) and "does not exist" in str(e):
            print("\nüíæ Database does not exist!")
            print("   ‚Üí Create database: CREATE DATABASE nhandanghinhanh;")
            print("   ‚Üí Or use pgAdmin to create it")
            
        elif "could not connect" in str(e) or "Connection refused" in str(e):
            print("\nüîå Cannot connect to PostgreSQL!")
            print("   ‚Üí Make sure PostgreSQL is running")
            print("   ‚Üí Windows: services.msc ‚Üí postgresql ‚Üí Start")
            print("   ‚Üí Check if port 5432 is correct")
            
        else:
            print(f"\n‚ùì Unknown error: {str(e)}")
            print("   ‚Üí Check DATABASE_URL in .env")
            print("   ‚Üí Verify PostgreSQL is installed")
        
        print()
        return False
        
    except Exception as e:
        print(f"   ‚ùå Unexpected error: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def check_env_file():
    """Ki·ªÉm tra file .env c√≥ t·ªìn t·∫°i kh√¥ng"""
    print("\nüîç Checking .env file...")
    
    if not os.path.exists(".env"):
        print("   ‚ö†Ô∏è  .env file not found!")
        print("\n   üí° Create .env file:")
        print("      1. Copy .env.example to .env")
        print("      2. Update DATABASE_URL with your credentials")
        print()
        
        if os.path.exists(".env.example"):
            print("   üìÑ Found .env.example - copy it:")
            print("      copy .env.example .env  (Windows)")
            print("      cp .env.example .env    (Mac/Linux)")
        
        return False
    else:
        print("   ‚úÖ .env file found!")
        return True

if __name__ == "__main__":
    # Check .env file first
    env_exists = check_env_file()
    
    if not env_exists:
        print("\n‚ö†Ô∏è  Please create .env file first!")
        print("=" * 60)
    else:
        # Run connection test
        test_basic_connection()

